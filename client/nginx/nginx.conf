worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Configure log format
    log_format main '[$time_local] $remote_addr "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Cloudflare's real IP headers
    real_ip_header CF-Connecting-IP;
    # Docker's network range
    set_real_ip_from 172.0.0.0/8;
    # Cloudflare's IPs
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2a06:98c0::/29;
    set_real_ip_from 2c0f:f248::/32;
    real_ip_recursive off;

 

    include       mime.types; # include type of file sending back in res header

    # Redirect http to https
    # server {
        # listen 80;
       #  server_name cadencetracks.com www.cadencetracks.com;
      #   return 301 https://$host$request_uri;
     #}

    server {
        listen 80;
        listen 443 ssl;
        server_name cadencetracks.com www.cadencetracks.com;
        
        # SSL certificates
        ssl_certificate /etc/nginx/ssl/origin-cert.pem;
        ssl_certificate_key /etc/nginx/ssl/private-key.pem;
        
        # Proxy API requests to the backend
        # Requests to /api/* are forwarded to server:3000
        location /api/ {
            # Allow docker network and home network
#            allow 192.168.50.0/24; # Home network range
 #           allow 127.0.0.1; # localhost
  #          allow 172.16.0.0/12; # Docker network range
   #         allow 120.17.144.72; # Jess's IP
    #        deny all; # Deny all other IPs
            
            proxy_pass http://server:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade; # handle connections that require 'upgrade' from http to another protocol (e.g. websockets)
            proxy_set_header Connection 'upgrade'; # upgrade is required for connections like websockets
            proxy_set_header Host $host; # passes original Host header from client to backend server
            proxy_set_header X-Real-IP $remote_addr; # passes client's real IP address to backend server
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # tracks client's IP through proxies
            proxy_set_header X-Forwarded-Proto $scheme; # passes protocol used by client to backend server
        }
        
        # Serve static files for frontend
        location / {
            # Allow docker network and home network
     #       allow 192.168.50.0/24; # Home network range
      #      allow 127.0.0.1; # localhost
       #     allow 172.16.0.0/12; # Docker network range
        #    allow 120.17.144.72; # Jess's IP
         #   deny all; # Deny all other IPs

            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ / =404; # search for requested files in order, defaulting to 404
        }
        
        # Rick Roll sus requests
        location ~* \.(env|env-example|env\.production|env\.development|php|sh|ini)|(wp-admin|wp-includes|wordpress|setup-config\.php|config/settings\.ini|info\.php|docker\.sh) {
             return 301 https://www.youtube.com/watch?v=dQw4w9WgXcQ;
        }

        # Let's Encrypt Challenge
        # Serves files necessary for certbot to authenticate the server and create the certificate
        # location /.well-known/acme-challenge/ {
        #     root /var/www/certbot;
        # }
    }
}
